// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_mult_matrix_mult,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.430000,HLS_SYN_LAT=86,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=363,HLS_SYN_LUT=507,HLS_VERSION=2021_1}" *)

module matrix_mult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        prod_address0,
        prod_ce0,
        prod_we0,
        prod_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [4:0] a_address1;
output   a_ce1;
input  [7:0] a_q1;
output  [4:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
output  [4:0] b_address1;
output   b_ce1;
input  [7:0] b_q1;
output  [4:0] prod_address0;
output   prod_ce0;
output   prod_we0;
output  [15:0] prod_d0;

reg ap_idle;
reg[4:0] a_address0;
reg a_ce0;
reg[4:0] a_address1;
reg a_ce1;
reg[4:0] b_address0;
reg b_ce0;
reg[4:0] b_address1;
reg b_ce1;
reg prod_ce0;
reg prod_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_state9_pp0_stage2_iter2;
wire    ap_block_state12_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln10_reg_551;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg  signed [7:0] reg_193;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state10_pp0_stage0_iter3;
wire    ap_block_state13_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage2_11001;
reg  signed [7:0] reg_197;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_state11_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
reg  signed [7:0] reg_201;
reg  signed [7:0] reg_205;
wire   [4:0] add_ln16_4_fu_242_p2;
reg   [4:0] add_ln16_4_reg_546;
wire   [0:0] icmp_ln10_fu_248_p2;
reg   [0:0] icmp_ln10_reg_551_pp0_iter1_reg;
reg   [0:0] icmp_ln10_reg_551_pp0_iter2_reg;
wire   [0:0] icmp_ln12_fu_269_p2;
reg   [0:0] icmp_ln12_reg_555;
wire   [2:0] select_ln10_fu_275_p3;
reg   [2:0] select_ln10_reg_560;
reg   [2:0] select_ln10_reg_560_pp0_iter1_reg;
wire   [4:0] add_ln16_5_fu_295_p2;
reg   [4:0] add_ln16_5_reg_568;
wire   [2:0] select_ln10_1_fu_301_p3;
reg   [2:0] select_ln10_1_reg_573;
reg   [2:0] select_ln10_1_reg_573_pp0_iter1_reg;
wire   [4:0] select_ln10_2_fu_314_p3;
reg   [4:0] select_ln10_2_reg_580;
reg   [4:0] select_ln10_2_reg_580_pp0_iter1_reg;
wire   [4:0] add_ln10_1_fu_319_p2;
reg   [4:0] add_ln10_1_reg_587;
wire   [4:0] add_ln10_3_fu_325_p2;
reg   [4:0] add_ln10_3_reg_592;
wire   [4:0] zext_ln16_7_fu_331_p1;
reg   [4:0] zext_ln16_7_reg_597;
reg   [4:0] zext_ln16_7_reg_597_pp0_iter1_reg;
wire   [3:0] add_ln16_6_fu_337_p2;
reg   [3:0] add_ln16_6_reg_604;
wire   [4:0] add_ln16_8_fu_343_p2;
reg   [4:0] add_ln16_8_reg_609;
wire   [4:0] add_ln10_4_fu_371_p2;
reg   [4:0] add_ln10_4_reg_624;
wire   [4:0] add_ln16_9_fu_384_p2;
reg   [4:0] add_ln16_9_reg_639;
wire   [4:0] add_ln10_2_fu_439_p2;
reg   [4:0] add_ln10_2_reg_679;
wire   [4:0] add_ln16_7_fu_448_p2;
reg   [4:0] add_ln16_7_reg_689;
wire   [4:0] add_ln13_1_fu_453_p2;
reg   [4:0] add_ln13_1_reg_694;
reg   [4:0] add_ln13_1_reg_694_pp0_iter2_reg;
reg   [4:0] add_ln13_1_reg_694_pp0_iter3_reg;
wire   [15:0] grp_fu_413_p2;
reg  signed [15:0] mul_ln16_3_reg_729;
wire   [15:0] grp_fu_462_p2;
reg  signed [15:0] mul_ln16_1_reg_739;
wire  signed [15:0] grp_fu_504_p3;
reg   [15:0] add_ln16_1_reg_749;
wire  signed [15:0] grp_fu_511_p3;
reg  signed [15:0] add_ln16_reg_754;
wire   [15:0] grp_fu_518_p3;
reg  signed [15:0] add_ln16_2_reg_759;
(* use_dsp48 = "no" *) wire   [15:0] add_ln16_3_fu_496_p2;
reg   [15:0] add_ln16_3_reg_764;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln16_3_fu_363_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln16_5_fu_367_p1;
wire   [63:0] zext_ln16_9_fu_376_p1;
wire   [63:0] zext_ln16_11_fu_380_p1;
wire   [63:0] zext_ln16_6_fu_389_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln16_12_fu_393_p1;
wire   [63:0] zext_ln16_2_fu_397_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] j_cast_fu_405_p1;
wire   [63:0] zext_ln16_4_fu_476_p1;
wire   [63:0] zext_ln16_10_fu_480_p1;
wire   [63:0] zext_ln13_1_fu_500_p1;
reg   [2:0] j_fu_70;
wire   [2:0] add_ln12_fu_349_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_load;
reg   [2:0] i_fu_74;
reg   [2:0] ap_sig_allocacmp_i_1;
reg   [4:0] indvar_flatten_fu_78;
reg   [4:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [4:0] add_ln10_5_fu_254_p2;
wire   [4:0] tmp_fu_234_p3;
wire   [4:0] zext_ln16_fu_230_p1;
wire   [2:0] add_ln10_fu_263_p2;
wire   [4:0] tmp_1_fu_287_p3;
wire   [4:0] zext_ln16_1_fu_283_p1;
wire   [3:0] zext_ln16_8_fu_334_p1;
wire   [4:0] p_shl5_cast_fu_422_p3;
wire   [4:0] zext_ln13_fu_419_p1;
wire   [4:0] add_ln13_fu_429_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter3_stage0;
reg    ap_idle_pp0_0to2;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_1to4;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_150;
reg    ap_condition_572;
reg    ap_condition_289;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

matrix_mult_mul_8s_8s_16_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_3_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_205),
    .din1(reg_197),
    .ce(1'b1),
    .dout(grp_fu_413_p2)
);

matrix_mult_mul_8s_8s_16_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_3_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_201),
    .din1(reg_193),
    .ce(1'b1),
    .dout(grp_fu_462_p2)
);

matrix_mult_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_205),
    .din1(reg_197),
    .din2(mul_ln16_3_reg_729),
    .ce(1'b1),
    .dout(grp_fu_504_p3)
);

matrix_mult_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_201),
    .din1(reg_193),
    .din2(mul_ln16_1_reg_739),
    .ce(1'b1),
    .dout(grp_fu_511_p3)
);

matrix_mult_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_q0),
    .din1(a_q0),
    .din2(add_ln16_1_reg_749),
    .ce(1'b1),
    .dout(grp_fu_518_p3)
);

matrix_mult_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_572)) begin
            i_fu_74 <= 3'd0;
        end else if ((1'b1 == ap_condition_150)) begin
            i_fu_74 <= select_ln10_1_reg_573;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_289)) begin
        if ((icmp_ln10_fu_248_p2 == 1'd0)) begin
            indvar_flatten_fu_78 <= add_ln10_5_fu_254_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_78 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_572)) begin
            j_fu_70 <= 3'd0;
        end else if ((1'b1 == ap_condition_150)) begin
            j_fu_70 <= add_ln12_fu_349_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_551 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln10_1_reg_587 <= add_ln10_1_fu_319_p2;
        add_ln10_3_reg_592 <= add_ln10_3_fu_325_p2;
        add_ln16_6_reg_604 <= add_ln16_6_fu_337_p2;
        add_ln16_8_reg_609 <= add_ln16_8_fu_343_p2;
        select_ln10_2_reg_580 <= select_ln10_2_fu_314_p3;
        zext_ln16_7_reg_597[2 : 0] <= zext_ln16_7_fu_331_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln10_2_reg_679 <= add_ln10_2_fu_439_p2;
        add_ln13_1_reg_694 <= add_ln13_1_fu_453_p2;
        add_ln13_1_reg_694_pp0_iter2_reg <= add_ln13_1_reg_694;
        add_ln13_1_reg_694_pp0_iter3_reg <= add_ln13_1_reg_694_pp0_iter2_reg;
        add_ln16_3_reg_764 <= add_ln16_3_fu_496_p2;
        add_ln16_7_reg_689 <= add_ln16_7_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_551 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln10_4_reg_624 <= add_ln10_4_fu_371_p2;
        add_ln16_9_reg_639 <= add_ln16_9_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln16_1_reg_749 <= grp_fu_504_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln16_2_reg_759 <= grp_fu_518_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln16_4_reg_546 <= add_ln16_4_fu_242_p2;
        icmp_ln10_reg_551 <= icmp_ln10_fu_248_p2;
        icmp_ln10_reg_551_pp0_iter1_reg <= icmp_ln10_reg_551;
        icmp_ln10_reg_551_pp0_iter2_reg <= icmp_ln10_reg_551_pp0_iter1_reg;
        mul_ln16_3_reg_729 <= grp_fu_413_p2;
        select_ln10_1_reg_573_pp0_iter1_reg <= select_ln10_1_reg_573;
        select_ln10_reg_560_pp0_iter1_reg <= select_ln10_reg_560;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln10_fu_248_p2 == 1'd0))) begin
        add_ln16_5_reg_568 <= add_ln16_5_fu_295_p2;
        icmp_ln12_reg_555 <= icmp_ln12_fu_269_p2;
        select_ln10_1_reg_573 <= select_ln10_1_fu_301_p3;
        select_ln10_reg_560 <= select_ln10_fu_275_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln16_reg_754 <= grp_fu_511_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln16_1_reg_739 <= grp_fu_462_p2;
        select_ln10_2_reg_580_pp0_iter1_reg <= select_ln10_2_reg_580;
        zext_ln16_7_reg_597_pp0_iter1_reg[2 : 0] <= zext_ln16_7_reg_597[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_193 <= a_q0;
        reg_201 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_197 <= a_q1;
        reg_205 <= b_q1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_address0 = zext_ln16_4_fu_476_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_address0 = zext_ln16_2_fu_397_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        a_address0 = zext_ln16_3_fu_363_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_address1 = zext_ln16_6_fu_389_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        a_address1 = zext_ln16_5_fu_367_p1;
    end else begin
        a_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_551 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln10_reg_551_pp0_iter2_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_address0 = zext_ln16_10_fu_480_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        b_address0 = j_cast_fu_405_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        b_address0 = zext_ln16_9_fu_376_p1;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_address1 = zext_ln16_12_fu_393_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        b_address1 = zext_ln16_11_fu_380_p1;
    end else begin
        b_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        prod_ce0 = 1'b1;
    end else begin
        prod_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        prod_we0 = 1'b1;
    end else begin
        prod_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_1_fu_319_p2 = (select_ln10_2_fu_314_p3 + 5'd1);

assign add_ln10_2_fu_439_p2 = (select_ln10_2_reg_580_pp0_iter1_reg + 5'd2);

assign add_ln10_3_fu_325_p2 = (select_ln10_2_fu_314_p3 + 5'd3);

assign add_ln10_4_fu_371_p2 = (select_ln10_2_reg_580 + 5'd4);

assign add_ln10_5_fu_254_p2 = (ap_sig_allocacmp_indvar_flatten_load + 5'd1);

assign add_ln10_fu_263_p2 = (ap_sig_allocacmp_i_1 + 3'd1);

assign add_ln12_fu_349_p2 = (select_ln10_reg_560 + 3'd1);

assign add_ln13_1_fu_453_p2 = (add_ln13_fu_429_p2 + zext_ln16_7_reg_597_pp0_iter1_reg);

assign add_ln13_fu_429_p2 = (p_shl5_cast_fu_422_p3 + zext_ln13_fu_419_p1);

assign add_ln16_3_fu_496_p2 = ($signed(add_ln16_2_reg_759) + $signed(add_ln16_reg_754));

assign add_ln16_4_fu_242_p2 = (tmp_fu_234_p3 + zext_ln16_fu_230_p1);

assign add_ln16_5_fu_295_p2 = (tmp_1_fu_287_p3 + zext_ln16_1_fu_283_p1);

assign add_ln16_6_fu_337_p2 = (zext_ln16_8_fu_334_p1 + 4'd5);

assign add_ln16_7_fu_448_p2 = (zext_ln16_7_reg_597_pp0_iter1_reg + 5'd10);

assign add_ln16_8_fu_343_p2 = (zext_ln16_7_fu_331_p1 + 5'd15);

assign add_ln16_9_fu_384_p2 = ($signed(zext_ln16_7_reg_597) + $signed(5'd20));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_150 = ((icmp_ln10_reg_551 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_289 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_572 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign icmp_ln10_fu_248_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 5'd25) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_269_p2 = ((ap_sig_allocacmp_j_load == 3'd5) ? 1'b1 : 1'b0);

assign j_cast_fu_405_p1 = select_ln10_reg_560_pp0_iter1_reg;

assign p_shl5_cast_fu_422_p3 = {{select_ln10_1_reg_573_pp0_iter1_reg}, {2'd0}};

assign prod_address0 = zext_ln13_1_fu_500_p1;

assign prod_d0 = add_ln16_3_reg_764;

assign select_ln10_1_fu_301_p3 = ((icmp_ln12_fu_269_p2[0:0] == 1'b1) ? add_ln10_fu_263_p2 : ap_sig_allocacmp_i_1);

assign select_ln10_2_fu_314_p3 = ((icmp_ln12_reg_555[0:0] == 1'b1) ? add_ln16_5_reg_568 : add_ln16_4_reg_546);

assign select_ln10_fu_275_p3 = ((icmp_ln12_fu_269_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_load);

assign tmp_1_fu_287_p3 = {{add_ln10_fu_263_p2}, {2'd0}};

assign tmp_fu_234_p3 = {{ap_sig_allocacmp_i_1}, {2'd0}};

assign zext_ln13_1_fu_500_p1 = add_ln13_1_reg_694_pp0_iter3_reg;

assign zext_ln13_fu_419_p1 = select_ln10_1_reg_573_pp0_iter1_reg;

assign zext_ln16_10_fu_480_p1 = add_ln16_7_reg_689;

assign zext_ln16_11_fu_380_p1 = add_ln16_8_reg_609;

assign zext_ln16_12_fu_393_p1 = add_ln16_9_reg_639;

assign zext_ln16_1_fu_283_p1 = add_ln10_fu_263_p2;

assign zext_ln16_2_fu_397_p1 = select_ln10_2_reg_580;

assign zext_ln16_3_fu_363_p1 = add_ln10_1_reg_587;

assign zext_ln16_4_fu_476_p1 = add_ln10_2_reg_679;

assign zext_ln16_5_fu_367_p1 = add_ln10_3_reg_592;

assign zext_ln16_6_fu_389_p1 = add_ln10_4_reg_624;

assign zext_ln16_7_fu_331_p1 = select_ln10_reg_560;

assign zext_ln16_8_fu_334_p1 = select_ln10_reg_560;

assign zext_ln16_9_fu_376_p1 = add_ln16_6_reg_604;

assign zext_ln16_fu_230_p1 = ap_sig_allocacmp_i_1;

always @ (posedge ap_clk) begin
    zext_ln16_7_reg_597[4:3] <= 2'b00;
    zext_ln16_7_reg_597_pp0_iter1_reg[4:3] <= 2'b00;
end

endmodule //matrix_mult
