-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    b_ce1 : OUT STD_LOGIC;
    b_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    prod_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    prod_ce0 : OUT STD_LOGIC;
    prod_we0 : OUT STD_LOGIC;
    prod_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrix_mult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_mult_matrix_mult,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.967000,HLS_SYN_LAT=78,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=102,HLS_SYN_LUT=516,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln10_reg_598 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal reg_193 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln10_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln10_fu_264_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln10_reg_602 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln10_1_fu_290_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln10_1_reg_607 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln10_2_fu_298_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_2_reg_613 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln16_7_fu_376_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln16_7_reg_646 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_fu_405_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln16_reg_662 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln13_1_fu_465_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_1_reg_682 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_load_3_reg_687 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln16_2_fu_484_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln16_2_reg_692 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln16_3_fu_515_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln16_3_reg_697 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln16_4_fu_521_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln16_4_reg_702 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln16_6_fu_537_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln16_6_reg_707 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln16_2_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j_cast_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_9_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_3_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln16_4_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_10_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_11_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_5_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln16_6_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_12_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_1_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_70 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln12_fu_331_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_fu_74 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_78 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln10_5_fu_243_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_223_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln16_fu_219_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln12_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_252_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_276_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln16_1_fu_272_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_10_fu_284_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_9_fu_231_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln16_8_fu_316_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln16_11_fu_320_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln10_1_fu_356_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln10_2_fu_366_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_12_fu_379_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_13_fu_390_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln10_fu_352_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln16_fu_401_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_cast_fu_414_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln13_fu_411_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln10_3_fu_435_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln10_4_fu_445_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_14_fu_455_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_fu_421_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln16_1_fu_470_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln10_2_fu_431_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln16_1_fu_474_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln16_6_fu_480_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln10_1_fu_427_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln16_7_fu_512_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln16_5_fu_509_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln16_2_fu_498_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln10_3_fu_490_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln10_4_fu_494_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln16_4_fu_505_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln16_5_fu_527_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln16_10_fu_533_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln16_3_fu_502_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln16_11_fu_553_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln16_9_fu_550_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln16_7_fu_556_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln16_12_fu_562_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln16_8_fu_547_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln16_8_fu_566_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_197 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component matrix_mult_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component matrix_mult_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_197)) then
                if ((icmp_ln10_fu_237_p2 = ap_const_lv1_0)) then 
                    i_fu_74 <= select_ln10_1_fu_290_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_74 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_197)) then
                if ((icmp_ln10_fu_237_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_78 <= add_ln10_5_fu_243_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_78 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_197)) then
                if ((icmp_ln10_fu_237_p2 = ap_const_lv1_0)) then 
                    j_fu_70 <= add_ln12_fu_331_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_70 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_598 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    reg_193 <= b_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    reg_193 <= b_q0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_598 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln13_1_reg_682 <= add_ln13_1_fu_465_p2;
                add_ln16_2_reg_692 <= add_ln16_2_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln16_3_reg_697 <= add_ln16_3_fu_515_p2;
                add_ln16_4_reg_702 <= add_ln16_4_fu_521_p2;
                add_ln16_6_reg_707 <= add_ln16_6_fu_537_p2;
                icmp_ln10_reg_598 <= icmp_ln10_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_598 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln16_reg_662 <= add_ln16_fu_405_p2;
                    zext_ln16_7_reg_646(2 downto 0) <= zext_ln16_7_fu_376_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_598 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                b_load_3_reg_687 <= b_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln10_fu_237_p2 = ap_const_lv1_0))) then
                select_ln10_1_reg_607 <= select_ln10_1_fu_290_p3;
                select_ln10_2_reg_613 <= select_ln10_2_fu_298_p3;
                select_ln10_reg_602 <= select_ln10_fu_264_p3;
            end if;
        end if;
    end process;
    zext_ln16_7_reg_646(4 downto 3) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln16_2_fu_306_p1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln16_4_fu_371_p1, zext_ln16_5_fu_440_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                a_address0 <= zext_ln16_5_fu_440_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                a_address0 <= zext_ln16_4_fu_371_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_address0 <= zext_ln16_2_fu_306_p1(5 - 1 downto 0);
            else 
                a_address0 <= "XXXXX";
            end if;
        else 
            a_address0 <= "XXXXX";
        end if; 
    end process;


    a_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln16_3_fu_361_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln16_6_fu_450_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                a_address1 <= zext_ln16_6_fu_450_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                a_address1 <= zext_ln16_3_fu_361_p1(5 - 1 downto 0);
            else 
                a_address1 <= "XXXXX";
            end if;
        else 
            a_address1 <= "XXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln10_1_fu_356_p2 <= std_logic_vector(unsigned(select_ln10_2_reg_613) + unsigned(ap_const_lv5_1));
    add_ln10_2_fu_366_p2 <= std_logic_vector(unsigned(select_ln10_2_reg_613) + unsigned(ap_const_lv5_2));
    add_ln10_3_fu_435_p2 <= std_logic_vector(unsigned(select_ln10_2_reg_613) + unsigned(ap_const_lv5_3));
    add_ln10_4_fu_445_p2 <= std_logic_vector(unsigned(select_ln10_2_reg_613) + unsigned(ap_const_lv5_4));
    add_ln10_5_fu_243_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv5_1));
    add_ln10_fu_252_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv3_1));
    add_ln12_fu_331_p2 <= std_logic_vector(unsigned(select_ln10_fu_264_p3) + unsigned(ap_const_lv3_1));
    add_ln13_1_fu_465_p2 <= std_logic_vector(unsigned(add_ln13_fu_421_p2) + unsigned(zext_ln16_7_reg_646));
    add_ln13_fu_421_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_414_p3) + unsigned(zext_ln13_fu_411_p1));
    add_ln16_10_fu_284_p2 <= std_logic_vector(unsigned(tmp_1_fu_276_p3) + unsigned(zext_ln16_1_fu_272_p1));
    add_ln16_11_fu_320_p2 <= std_logic_vector(unsigned(zext_ln16_8_fu_316_p1) + unsigned(ap_const_lv4_5));
    add_ln16_12_fu_379_p2 <= std_logic_vector(unsigned(zext_ln16_7_fu_376_p1) + unsigned(ap_const_lv5_A));
    add_ln16_13_fu_390_p2 <= std_logic_vector(unsigned(zext_ln16_7_fu_376_p1) + unsigned(ap_const_lv5_F));
    add_ln16_14_fu_455_p2 <= std_logic_vector(unsigned(zext_ln16_7_reg_646) + unsigned(ap_const_lv5_14));
    add_ln16_1_fu_474_p2 <= std_logic_vector(signed(sext_ln16_1_fu_470_p1) + signed(sext_ln10_2_fu_431_p1));
    add_ln16_2_fu_484_p2 <= std_logic_vector(signed(sext_ln16_6_fu_480_p1) + signed(sext_ln10_1_fu_427_p1));
    add_ln16_3_fu_515_p2 <= std_logic_vector(signed(sext_ln16_7_fu_512_p1) + signed(sext_ln16_5_fu_509_p1));
    add_ln16_4_fu_521_p2 <= std_logic_vector(signed(sext_ln16_2_fu_498_p1) + signed(sext_ln10_3_fu_490_p1));
    add_ln16_5_fu_527_p2 <= std_logic_vector(signed(sext_ln10_4_fu_494_p1) + signed(sext_ln16_4_fu_505_p1));
    add_ln16_6_fu_537_p2 <= std_logic_vector(signed(sext_ln16_10_fu_533_p1) + signed(sext_ln16_3_fu_502_p1));
    add_ln16_7_fu_556_p2 <= std_logic_vector(signed(sext_ln16_11_fu_553_p1) + signed(sext_ln16_9_fu_550_p1));
    add_ln16_8_fu_566_p2 <= std_logic_vector(signed(sext_ln16_12_fu_562_p1) + signed(sext_ln16_8_fu_547_p1));
    add_ln16_9_fu_231_p2 <= std_logic_vector(unsigned(tmp_fu_223_p3) + unsigned(zext_ln16_fu_219_p1));
    add_ln16_fu_405_p2 <= std_logic_vector(signed(sext_ln10_fu_352_p1) + signed(sext_ln16_fu_401_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_197_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_197 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln10_reg_598)
    begin
        if (((icmp_ln10_reg_598 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, i_fu_74)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_78)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_78;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_fu_70, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_70;
        end if; 
    end process;


    b_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln16_9_fu_326_p1, ap_block_pp0_stage1, zext_ln16_11_fu_396_p1, ap_block_pp0_stage2, zext_ln16_12_fu_460_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                b_address0 <= zext_ln16_12_fu_460_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_address0 <= zext_ln16_11_fu_396_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_address0 <= zext_ln16_9_fu_326_p1(5 - 1 downto 0);
            else 
                b_address0 <= "XXXXX";
            end if;
        else 
            b_address0 <= "XXXXX";
        end if; 
    end process;


    b_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, j_cast_fu_311_p1, ap_block_pp0_stage1, zext_ln16_10_fu_385_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_address1 <= zext_ln16_10_fu_385_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_address1 <= j_cast_fu_311_p1(5 - 1 downto 0);
            else 
                b_address1 <= "XXXXX";
            end if;
        else 
            b_address1 <= "XXXXX";
        end if; 
    end process;


    b_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            b_ce1 <= ap_const_logic_1;
        else 
            b_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln10_fu_237_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv5_19) else "0";
    icmp_ln12_fu_258_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv3_5) else "0";
    j_cast_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_fu_264_p3),64));
    p_shl5_cast_fu_414_p3 <= (select_ln10_1_reg_607 & ap_const_lv2_0);
    prod_address0 <= zext_ln13_1_fu_543_p1(5 - 1 downto 0);

    prod_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            prod_ce0 <= ap_const_logic_1;
        else 
            prod_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        prod_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_8_fu_566_p2),16));


    prod_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            prod_we0 <= ap_const_logic_1;
        else 
            prod_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln10_1_fu_290_p3 <= 
        add_ln10_fu_252_p2 when (icmp_ln12_fu_258_p2(0) = '1') else 
        ap_sig_allocacmp_i_1;
    select_ln10_2_fu_298_p3 <= 
        add_ln16_10_fu_284_p2 when (icmp_ln12_fu_258_p2(0) = '1') else 
        add_ln16_9_fu_231_p2;
    select_ln10_fu_264_p3 <= 
        ap_const_lv3_0 when (icmp_ln12_fu_258_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
        sext_ln10_1_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_q1),10));

        sext_ln10_2_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_q0),9));

        sext_ln10_3_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_q0),9));

        sext_ln10_4_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_q1),9));

        sext_ln10_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_q0),9));

        sext_ln16_10_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_5_fu_527_p2),10));

        sext_ln16_11_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_6_reg_707),11));

        sext_ln16_12_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_7_fu_556_p2),12));

        sext_ln16_1_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_193),9));

        sext_ln16_2_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_193),9));

        sext_ln16_3_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_load_3_reg_687),10));

        sext_ln16_4_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_q0),9));

        sext_ln16_5_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_reg_662),11));

        sext_ln16_6_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_1_fu_474_p2),10));

        sext_ln16_7_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_2_reg_692),11));

        sext_ln16_8_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_3_reg_697),12));

        sext_ln16_9_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_4_reg_702),11));

        sext_ln16_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_q1),9));

    tmp_1_fu_276_p3 <= (add_ln10_fu_252_p2 & ap_const_lv2_0);
    tmp_fu_223_p3 <= (ap_sig_allocacmp_i_1 & ap_const_lv2_0);
    zext_ln13_1_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_1_reg_682),64));
    zext_ln13_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_1_reg_607),5));
    zext_ln16_10_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_12_fu_379_p2),64));
    zext_ln16_11_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_13_fu_390_p2),64));
    zext_ln16_12_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_14_fu_455_p2),64));
    zext_ln16_1_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln10_fu_252_p2),5));
    zext_ln16_2_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_2_fu_298_p3),64));
    zext_ln16_3_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln10_1_fu_356_p2),64));
    zext_ln16_4_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln10_2_fu_366_p2),64));
    zext_ln16_5_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln10_3_fu_435_p2),64));
    zext_ln16_6_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln10_4_fu_445_p2),64));
    zext_ln16_7_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_reg_602),5));
    zext_ln16_8_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_fu_264_p3),4));
    zext_ln16_9_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_11_fu_320_p2),64));
    zext_ln16_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),5));
end behav;
